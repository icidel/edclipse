/*
* generated by Xtext
*/
grammar InternalEdje;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.enlightenment.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.enlightenment.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.xtext.enlightenment.services.EdjeGrammarAccess;

}

@parser::members {
 
 	private EdjeGrammarAccess grammarAccess;
 	
    public InternalEdjeParser(TokenStream input, IAstFactory factory, EdjeGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/xtext/enlightenment/parser/antlr/internal/InternalEdje.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getIncludesIncludeParserRuleCall_0_0(), currentNode); 
	    }
	    lv_includes_0=ruleInclude 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "includes", lv_includes_0, "Include", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getCollectionsCollectionsParserRuleCall_1_0(), currentNode); 
	    }
	    lv_collections_1=ruleCollections 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "collections", lv_collections_1, "Collections", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleInclude
entryRuleInclude returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIncludeRule(), currentNode); } 
	 iv_ruleInclude=ruleInclude 
	 { $current=$iv_ruleInclude.current.getText(); }  
	 EOF 
;

// Rule Include
ruleInclude returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

	kw='#include' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIncludeAccess().getIncludeKeyword(), null); 
    }

    ;







// Entry rule entryRuleLUA_Script
entryRuleLUA_Script returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLUA_ScriptRule(), currentNode); }
	 iv_ruleLUA_Script=ruleLUA_Script 
	 { $current=$iv_ruleLUA_Script.current; } 
	 EOF 
;

// Rule LUA_Script
ruleLUA_Script returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('lua_script {' 
    {
        createLeafNode(grammarAccess.getLUA_ScriptAccess().getLua_scriptKeyword_0(), null); 
    }
(	
	
	    lv_content_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getLUA_ScriptAccess().getContentSTRINGTerminalRuleCall_1_0(), "content"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLUA_ScriptRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "content", lv_content_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getLUA_ScriptAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleCollections
entryRuleCollections returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCollectionsRule(), currentNode); }
	 iv_ruleCollections=ruleCollections 
	 { $current=$iv_ruleCollections.current; } 
	 EOF 
;

// Rule Collections
ruleCollections returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('collections {' 
    {
        createLeafNode(grammarAccess.getCollectionsAccess().getCollectionsKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCollectionsAccess().getGroupsGroupParserRuleCall_1_0(), currentNode); 
	    }
	    lv_groups_1=ruleGroup 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "groups", lv_groups_1, "Group", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getCollectionsAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getGroupRule(), currentNode); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('group {' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getGroupKeyword_0(), null); 
    }
('name:' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getNameKeyword_1_0(), null); 
    }
(	
	
	    lv_name_2=	RULE_STRING
	{
		createLeafNode(grammarAccess.getGroupAccess().getNameSTRINGTerminalRuleCall_1_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getSemicolonKeyword_1_2(), null); 
    }
)?('min:' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getMinKeyword_2_0(), null); 
    }
((	
	
	    lv_minx_5=	RULE_INT
	{
		createLeafNode(grammarAccess.getGroupAccess().getMinxINTTerminalRuleCall_2_1_0_0(), "minx"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "minx", lv_minx_5, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_miny_6=	RULE_INT
	{
		createLeafNode(grammarAccess.getGroupAccess().getMinyINTTerminalRuleCall_2_1_1_0(), "miny"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "miny", lv_miny_6, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))';' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getSemicolonKeyword_2_2(), null); 
    }
)?('parts {' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getPartsKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getPartPartParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_part_9=rulePart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "part", lv_part_9, "Part", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_3_2(), null); 
    }
)*('programs {' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getProgramsKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getProgramProgramParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_program_12=ruleProgram 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "program", lv_program_12, "Program", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_4_2(), null); 
    }
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getLua_scriptLUA_ScriptParserRuleCall_5_0(), currentNode); 
	    }
	    lv_lua_script_14=ruleLUA_Script 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "lua_script", lv_lua_script_14, "LUA_Script", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'}' 
    {
        createLeafNode(grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_6(), null); 
    }
);





// Entry rule entryRulePart
entryRulePart returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPartRule(), currentNode); }
	 iv_rulePart=rulePart 
	 { $current=$iv_rulePart.current; } 
	 EOF 
;

// Rule Part
rulePart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('part {' 
    {
        createLeafNode(grammarAccess.getPartAccess().getPartKeyword_0(), null); 
    }
('name:' 
    {
        createLeafNode(grammarAccess.getPartAccess().getNameKeyword_1_0(), null); 
    }
(	
	
	    lv_name_2=	RULE_STRING
	{
		createLeafNode(grammarAccess.getPartAccess().getNameSTRINGTerminalRuleCall_1_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getPartAccess().getSemicolonKeyword_1_2(), null); 
    }
)?('min:' 
    {
        createLeafNode(grammarAccess.getPartAccess().getMinKeyword_2_0(), null); 
    }
((	
	
	    lv_minx_5=	RULE_INT
	{
		createLeafNode(grammarAccess.getPartAccess().getMinxINTTerminalRuleCall_2_1_0_0(), "minx"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "minx", lv_minx_5, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_miny_6=	RULE_INT
	{
		createLeafNode(grammarAccess.getPartAccess().getMinyINTTerminalRuleCall_2_1_1_0(), "miny"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "miny", lv_miny_6, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))';' 
    {
        createLeafNode(grammarAccess.getPartAccess().getSemicolonKeyword_2_2(), null); 
    }
)?('type:' 
    {
        createLeafNode(grammarAccess.getPartAccess().getTypeKeyword_3_0(), null); 
    }
(	
	
	    lv_type_9=	RULE_ID
	{
		createLeafNode(grammarAccess.getPartAccess().getTypeIDTerminalRuleCall_3_1_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_9, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getPartAccess().getSemicolonKeyword_3_2(), null); 
    }
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPartAccess().getDescriptionsDescriptionParserRuleCall_4_0(), currentNode); 
	    }
	    lv_descriptions_11=ruleDescription 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "descriptions", lv_descriptions_11, "Description", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getPartAccess().getRightCurlyBracketKeyword_5(), null); 
    }
);





// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDescriptionRule(), currentNode); }
	 iv_ruleDescription=ruleDescription 
	 { $current=$iv_ruleDescription.current; } 
	 EOF 
;

// Rule Description
ruleDescription returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('description {' 
    {
        createLeafNode(grammarAccess.getDescriptionAccess().getDescriptionKeyword_0(), null); 
    }
'rel1 {' 
    {
        createLeafNode(grammarAccess.getDescriptionAccess().getRel1Keyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDescriptionAccess().getCoordinatesCoordinatesParserRuleCall_2_0(), currentNode); 
	    }
	    lv_coordinates_2=ruleCoordinates 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "coordinates", lv_coordinates_2, "Coordinates", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getDescriptionAccess().getRightCurlyBracketKeyword_3(), null); 
    }
'rel2 {' 
    {
        createLeafNode(grammarAccess.getDescriptionAccess().getRel2Keyword_4(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDescriptionAccess().getCoordinatesCoordinatesParserRuleCall_5_0(), currentNode); 
	    }
	    lv_coordinates_5=ruleCoordinates 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "coordinates", lv_coordinates_5, "Coordinates", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getDescriptionAccess().getRightCurlyBracketKeyword_6(), null); 
    }
('color:' 
    {
        createLeafNode(grammarAccess.getDescriptionAccess().getColorKeyword_7_0(), null); 
    }
((	
	
	    lv_red_8=	RULE_INT
	{
		createLeafNode(grammarAccess.getDescriptionAccess().getRedINTTerminalRuleCall_7_1_0_0(), "red"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "red", lv_red_8, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_green_9=	RULE_INT
	{
		createLeafNode(grammarAccess.getDescriptionAccess().getGreenINTTerminalRuleCall_7_1_1_0(), "green"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "green", lv_green_9, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_blue_10=	RULE_INT
	{
		createLeafNode(grammarAccess.getDescriptionAccess().getBlueINTTerminalRuleCall_7_1_2_0(), "blue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "blue", lv_blue_10, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_alpha_11=	RULE_INT
	{
		createLeafNode(grammarAccess.getDescriptionAccess().getAlphaINTTerminalRuleCall_7_1_3_0(), "alpha"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "alpha", lv_alpha_11, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))';' 
    {
        createLeafNode(grammarAccess.getDescriptionAccess().getSemicolonKeyword_7_2(), null); 
    }
)?'}' 
    {
        createLeafNode(grammarAccess.getDescriptionAccess().getRightCurlyBracketKeyword_8(), null); 
    }
);





// Entry rule entryRuleCoordinates
entryRuleCoordinates returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCoordinatesRule(), currentNode); }
	 iv_ruleCoordinates=ruleCoordinates 
	 { $current=$iv_ruleCoordinates.current; } 
	 EOF 
;

// Rule Coordinates
ruleCoordinates returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('absolute:' 
    {
        createLeafNode(grammarAccess.getCoordinatesAccess().getAbsoluteKeyword_0_0(), null); 
    }
((	
	
	    lv_x_1=	RULE_INT
	{
		createLeafNode(grammarAccess.getCoordinatesAccess().getXINTTerminalRuleCall_0_1_0_0(), "x"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoordinatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "x", lv_x_1, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_y_2=	RULE_INT
	{
		createLeafNode(grammarAccess.getCoordinatesAccess().getYINTTerminalRuleCall_0_1_1_0(), "y"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoordinatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "y", lv_y_2, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_width_3=	RULE_INT
	{
		createLeafNode(grammarAccess.getCoordinatesAccess().getWidthINTTerminalRuleCall_0_1_2_0(), "width"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoordinatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "width", lv_width_3, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_height_4=	RULE_INT
	{
		createLeafNode(grammarAccess.getCoordinatesAccess().getHeightINTTerminalRuleCall_0_1_3_0(), "height"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoordinatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "height", lv_height_4, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))';' 
    {
        createLeafNode(grammarAccess.getCoordinatesAccess().getSemicolonKeyword_0_2(), null); 
    }
)?('relative:' 
    {
        createLeafNode(grammarAccess.getCoordinatesAccess().getRelativeKeyword_1_0(), null); 
    }
((	
	
	    lv_x_7=	RULE_INT
	{
		createLeafNode(grammarAccess.getCoordinatesAccess().getXINTTerminalRuleCall_1_1_0_0(), "x"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoordinatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "x", lv_x_7, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_y_8=	RULE_INT
	{
		createLeafNode(grammarAccess.getCoordinatesAccess().getYINTTerminalRuleCall_1_1_1_0(), "y"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoordinatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "y", lv_y_8, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))';' 
    {
        createLeafNode(grammarAccess.getCoordinatesAccess().getSemicolonKeyword_1_2(), null); 
    }
)?('offset:' 
    {
        createLeafNode(grammarAccess.getCoordinatesAccess().getOffsetKeyword_2_0(), null); 
    }
((	
	
	    lv_x_11=	RULE_INT
	{
		createLeafNode(grammarAccess.getCoordinatesAccess().getXINTTerminalRuleCall_2_1_0_0(), "x"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoordinatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "x", lv_x_11, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_y_12=	RULE_INT
	{
		createLeafNode(grammarAccess.getCoordinatesAccess().getYINTTerminalRuleCall_2_1_1_0(), "y"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoordinatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "y", lv_y_12, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))';' 
    {
        createLeafNode(grammarAccess.getCoordinatesAccess().getSemicolonKeyword_2_2(), null); 
    }
)?);







// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getProgramRule(), currentNode); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('program {' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getProgramKeyword_0(), null); 
    }
('name:' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getNameKeyword_1_0(), null); 
    }
(	
	
	    lv_name_2=	RULE_STRING
	{
		createLeafNode(grammarAccess.getProgramAccess().getNameSTRINGTerminalRuleCall_1_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSemicolonKeyword_1_2(), null); 
    }
)('signal:' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSignalKeyword_2_0(), null); 
    }
(	
	
	    lv_signal_5=	RULE_STRING
	{
		createLeafNode(grammarAccess.getProgramAccess().getSignalSTRINGTerminalRuleCall_2_1_0(), "signal"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "signal", lv_signal_5, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSemicolonKeyword_2_2(), null); 
    }
)('source:' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSourceKeyword_3_0(), null); 
    }
(	
	
	    lv_source_8=	RULE_STRING
	{
		createLeafNode(grammarAccess.getProgramAccess().getSourceSTRINGTerminalRuleCall_3_1_0(), "source"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "source", lv_source_8, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSemicolonKeyword_3_2(), null); 
    }
)('action:' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getActionKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getActionActionParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_action_11=ruleAction 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "action", lv_action_11, "Action", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getLua_scriptLUA_ScriptParserRuleCall_5_0(), currentNode); 
	    }
	    lv_lua_script_12=ruleLUA_Script 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "lua_script", lv_lua_script_12, "LUA_Script", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'}' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_6(), null); 
    }
);





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getActionRule(), currentNode); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_params_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getActionAccess().getParamsSTRINGTerminalRuleCall_1_0(), "params"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)*';' 
    {
        createLeafNode(grammarAccess.getActionAccess().getSemicolonKeyword_2(), null); 
    }
);





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


