/*
* generated by Xtext
*/
package org.xtext.enlightenment.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.xtext.enlightenment.services.EdjeGrammarAccess;

import com.google.inject.Inject;

public class EdjeParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EdjeGrammarAccess grammarAccess;
		
	public EdjeGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new LUA_Script_Group(this, this, 1, inst);
			case 2: return new Collections_Group(this, this, 2, inst);
			case 3: return new Group_Group(this, this, 3, inst);
			case 4: return new Part_Group(this, this, 4, inst);
			case 5: return new Description_Group(this, this, 5, inst);
			case 6: return new Coordinates_Group(this, this, 6, inst);
			case 7: return new Programs_Group(this, this, 7, inst);
			case 8: return new Program_Group(this, this, 8, inst);
			case 9: return new Action_Group(this, this, 9, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   includes+=Include* collections+=Collections*;
 *
 **/

// includes+=Include* collections+=Collections*
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_CollectionsAssignment_1(parent, this, 0, inst);
			case 1: return new Model_IncludesAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// includes+=Include*
protected class Model_IncludesAssignment_0 extends AssignmentToken  {
	
	public Model_IncludesAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getIncludesAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_IncludesAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("includes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("includes");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getModelAccess().getIncludesIncludeParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// collections+=Collections*
protected class Model_CollectionsAssignment_1 extends AssignmentToken  {
	
	public Model_CollectionsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getCollectionsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Collections_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collections",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collections");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCollectionsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getCollectionsCollectionsParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_CollectionsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Model_IncludesAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule Model ****************/




/************ begin Rule LUA_Script ****************
 *
 * LUA_Script:
 *   "lua_script {" content=STRING "}";
 *
 **/

// "lua_script {" content=STRING "}"
protected class LUA_Script_Group extends GroupToken {
	
	public LUA_Script_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLUA_ScriptAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LUA_Script_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLUA_ScriptRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "lua_script {"
protected class LUA_Script_Lua_scriptKeyword_0 extends KeywordToken  {
	
	public LUA_Script_Lua_scriptKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLUA_ScriptAccess().getLua_scriptKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// content=STRING
protected class LUA_Script_ContentAssignment_1 extends AssignmentToken  {
	
	public LUA_Script_ContentAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLUA_ScriptAccess().getContentAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LUA_Script_Lua_scriptKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("content",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("content");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLUA_ScriptAccess().getContentSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class LUA_Script_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public LUA_Script_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLUA_ScriptAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LUA_Script_ContentAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LUA_Script ****************/


/************ begin Rule Collections ****************
 *
 * Collections:
 *   "collections {" groups+=Group* "}";
 *
 **/

// "collections {" groups+=Group* "}"
protected class Collections_Group extends GroupToken {
	
	public Collections_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Collections_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCollectionsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "collections {"
protected class Collections_CollectionsKeyword_0 extends KeywordToken  {
	
	public Collections_CollectionsKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionsAccess().getCollectionsKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// groups+=Group*
protected class Collections_GroupsAssignment_1 extends AssignmentToken  {
	
	public Collections_GroupsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionsAccess().getGroupsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("groups",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("groups");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCollectionsAccess().getGroupsGroupParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Collections_GroupsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Collections_CollectionsKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Collections_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Collections_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionsAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Collections_GroupsAssignment_1(parent, this, 0, inst);
			case 1: return new Collections_CollectionsKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Collections ****************/


/************ begin Rule Group ****************
 *
 * Group:
 *   "group {" ("name:" name=STRING ";")? ("min:" (minx=INT miny=INT) ";")? ("parts {" part+=
 *   Part* "}")* ("programs {" program+=Program* "}")* lua_script=LUA_Script? "}";
 *
 **/

// "group {" ("name:" name=STRING ";")? ("min:" (minx=INT miny=INT) ";")? ("parts {" part+=
// Part* "}")* ("programs {" program+=Program* "}")* lua_script=LUA_Script? "}"
protected class Group_Group extends GroupToken {
	
	public Group_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "group {"
protected class Group_GroupKeyword_0 extends KeywordToken  {
	
	public Group_GroupKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroupKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ("name:" name=STRING ";")?
protected class Group_Group_1 extends GroupToken {
	
	public Group_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_SemicolonKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "name:"
protected class Group_NameKeyword_1_0 extends KeywordToken  {
	
	public Group_NameKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getNameKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_GroupKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=STRING
protected class Group_NameAssignment_1_1 extends AssignmentToken  {
	
	public Group_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_NameKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getGroupAccess().getNameSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Group_SemicolonKeyword_1_2 extends KeywordToken  {
	
	public Group_SemicolonKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getSemicolonKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("min:" (minx=INT miny=INT) ";")?
protected class Group_Group_2 extends GroupToken {
	
	public Group_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_SemicolonKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "min:"
protected class Group_MinKeyword_2_0 extends KeywordToken  {
	
	public Group_MinKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getMinKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group_1(parent, this, 0, inst);
			case 1: return new Group_GroupKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// minx=INT miny=INT
protected class Group_Group_2_1 extends GroupToken {
	
	public Group_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_MinyAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// minx=INT
protected class Group_MinxAssignment_2_1_0 extends AssignmentToken  {
	
	public Group_MinxAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getMinxAssignment_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_MinKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("minx",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("minx");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getGroupAccess().getMinxINTTerminalRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// miny=INT
protected class Group_MinyAssignment_2_1_1 extends AssignmentToken  {
	
	public Group_MinyAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getMinyAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_MinxAssignment_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("miny",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("miny");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getGroupAccess().getMinyINTTerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Group_SemicolonKeyword_2_2 extends KeywordToken  {
	
	public Group_SemicolonKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getSemicolonKeyword_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("parts {" part+=Part* "}")*
protected class Group_Group_3 extends GroupToken {
	
	public Group_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_RightCurlyBracketKeyword_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "parts {"
protected class Group_PartsKeyword_3_0 extends KeywordToken  {
	
	public Group_PartsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getPartsKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group_3(parent, this, 0, inst);
			case 1: return new Group_Group_2(parent, this, 1, inst);
			case 2: return new Group_Group_1(parent, this, 2, inst);
			case 3: return new Group_GroupKeyword_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// part+=Part*
protected class Group_PartAssignment_3_1 extends AssignmentToken  {
	
	public Group_PartAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getPartAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("part",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("part");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getPartPartParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_PartAssignment_3_1(parent, next, actIndex, consumed);
			case 1: return new Group_PartsKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Group_RightCurlyBracketKeyword_3_2 extends KeywordToken  {
	
	public Group_RightCurlyBracketKeyword_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_PartAssignment_3_1(parent, this, 0, inst);
			case 1: return new Group_PartsKeyword_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("programs {" program+=Program* "}")*
protected class Group_Group_4 extends GroupToken {
	
	public Group_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGroupAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_RightCurlyBracketKeyword_4_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "programs {"
protected class Group_ProgramsKeyword_4_0 extends KeywordToken  {
	
	public Group_ProgramsKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getProgramsKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Group_4(parent, this, 0, inst);
			case 1: return new Group_Group_3(parent, this, 1, inst);
			case 2: return new Group_Group_2(parent, this, 2, inst);
			case 3: return new Group_Group_1(parent, this, 3, inst);
			case 4: return new Group_GroupKeyword_0(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// program+=Program*
protected class Group_ProgramAssignment_4_1 extends AssignmentToken  {
	
	public Group_ProgramAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getProgramAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("program",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("program");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProgramRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getProgramProgramParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_ProgramAssignment_4_1(parent, next, actIndex, consumed);
			case 1: return new Group_ProgramsKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Group_RightCurlyBracketKeyword_4_2 extends KeywordToken  {
	
	public Group_RightCurlyBracketKeyword_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_ProgramAssignment_4_1(parent, this, 0, inst);
			case 1: return new Group_ProgramsKeyword_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// lua_script=LUA_Script?
protected class Group_Lua_scriptAssignment_5 extends AssignmentToken  {
	
	public Group_Lua_scriptAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupAccess().getLua_scriptAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LUA_Script_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("lua_script",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("lua_script");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLUA_ScriptRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGroupAccess().getLua_scriptLUA_ScriptParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Group_Group_4(parent, next, actIndex, consumed);
			case 1: return new Group_Group_3(parent, next, actIndex, consumed);
			case 2: return new Group_Group_2(parent, next, actIndex, consumed);
			case 3: return new Group_Group_1(parent, next, actIndex, consumed);
			case 4: return new Group_GroupKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Group_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public Group_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Group_Lua_scriptAssignment_5(parent, this, 0, inst);
			case 1: return new Group_Group_4(parent, this, 1, inst);
			case 2: return new Group_Group_3(parent, this, 2, inst);
			case 3: return new Group_Group_2(parent, this, 3, inst);
			case 4: return new Group_Group_1(parent, this, 4, inst);
			case 5: return new Group_GroupKeyword_0(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Group ****************/


/************ begin Rule Part ****************
 *
 * Part:
 *   "part {" ("name:" name=STRING ";")? ("min:" (minx=INT miny=INT) ";")? ("type:" type=ID ";"
 *   )? descriptions+=Description* "}";
 *
 **/

// "part {" ("name:" name=STRING ";")? ("min:" (minx=INT miny=INT) ";")? ("type:" type=ID ";"
// )? descriptions+=Description* "}"
protected class Part_Group extends GroupToken {
	
	public Part_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPartAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "part {"
protected class Part_PartKeyword_0 extends KeywordToken  {
	
	public Part_PartKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartAccess().getPartKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ("name:" name=STRING ";")?
protected class Part_Group_1 extends GroupToken {
	
	public Part_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPartAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_SemicolonKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "name:"
protected class Part_NameKeyword_1_0 extends KeywordToken  {
	
	public Part_NameKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartAccess().getNameKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_PartKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=STRING
protected class Part_NameAssignment_1_1 extends AssignmentToken  {
	
	public Part_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPartAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_NameKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPartAccess().getNameSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Part_SemicolonKeyword_1_2 extends KeywordToken  {
	
	public Part_SemicolonKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartAccess().getSemicolonKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("min:" (minx=INT miny=INT) ";")?
protected class Part_Group_2 extends GroupToken {
	
	public Part_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPartAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_SemicolonKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "min:"
protected class Part_MinKeyword_2_0 extends KeywordToken  {
	
	public Part_MinKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartAccess().getMinKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_Group_1(parent, this, 0, inst);
			case 1: return new Part_PartKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// minx=INT miny=INT
protected class Part_Group_2_1 extends GroupToken {
	
	public Part_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPartAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_MinyAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// minx=INT
protected class Part_MinxAssignment_2_1_0 extends AssignmentToken  {
	
	public Part_MinxAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPartAccess().getMinxAssignment_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_MinKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("minx",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("minx");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPartAccess().getMinxINTTerminalRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// miny=INT
protected class Part_MinyAssignment_2_1_1 extends AssignmentToken  {
	
	public Part_MinyAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPartAccess().getMinyAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_MinxAssignment_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("miny",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("miny");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPartAccess().getMinyINTTerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Part_SemicolonKeyword_2_2 extends KeywordToken  {
	
	public Part_SemicolonKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartAccess().getSemicolonKeyword_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_Group_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("type:" type=ID ";")?
protected class Part_Group_3 extends GroupToken {
	
	public Part_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPartAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_SemicolonKeyword_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "type:"
protected class Part_TypeKeyword_3_0 extends KeywordToken  {
	
	public Part_TypeKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartAccess().getTypeKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_Group_2(parent, this, 0, inst);
			case 1: return new Part_Group_1(parent, this, 1, inst);
			case 2: return new Part_PartKeyword_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// type=ID
protected class Part_TypeAssignment_3_1 extends AssignmentToken  {
	
	public Part_TypeAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPartAccess().getTypeAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_TypeKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPartAccess().getTypeIDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Part_SemicolonKeyword_3_2 extends KeywordToken  {
	
	public Part_SemicolonKeyword_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartAccess().getSemicolonKeyword_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_TypeAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// descriptions+=Description*
protected class Part_DescriptionsAssignment_4 extends AssignmentToken  {
	
	public Part_DescriptionsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPartAccess().getDescriptionsAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("descriptions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("descriptions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDescriptionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPartAccess().getDescriptionsDescriptionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Part_DescriptionsAssignment_4(parent, next, actIndex, consumed);
			case 1: return new Part_Group_3(parent, next, actIndex, consumed);
			case 2: return new Part_Group_2(parent, next, actIndex, consumed);
			case 3: return new Part_Group_1(parent, next, actIndex, consumed);
			case 4: return new Part_PartKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Part_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Part_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartAccess().getRightCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Part_DescriptionsAssignment_4(parent, this, 0, inst);
			case 1: return new Part_Group_3(parent, this, 1, inst);
			case 2: return new Part_Group_2(parent, this, 2, inst);
			case 3: return new Part_Group_1(parent, this, 3, inst);
			case 4: return new Part_PartKeyword_0(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Part ****************/


/************ begin Rule Description ****************
 *
 * Description:
 *   "description {" "rel1 {" coordinates=Coordinates "}" "rel2 {" coordinates=Coordinates
 *   "}" ("color:" (red=INT green=INT blue=INT alpha=INT) ";")? "}";
 *
 **/

// "description {" "rel1 {" coordinates=Coordinates "}" "rel2 {" coordinates=Coordinates
// "}" ("color:" (red=INT green=INT blue=INT alpha=INT) ";")? "}"
protected class Description_Group extends GroupToken {
	
	public Description_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_RightCurlyBracketKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDescriptionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "description {"
protected class Description_DescriptionKeyword_0 extends KeywordToken  {
	
	public Description_DescriptionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getDescriptionKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "rel1 {"
protected class Description_Rel1Keyword_1 extends KeywordToken  {
	
	public Description_Rel1Keyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getRel1Keyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_DescriptionKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// coordinates=Coordinates
protected class Description_CoordinatesAssignment_2 extends AssignmentToken  {
	
	public Description_CoordinatesAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getCoordinatesAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("coordinates",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("coordinates");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCoordinatesRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDescriptionAccess().getCoordinatesCoordinatesParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Description_Rel1Keyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Description_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Description_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_CoordinatesAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "rel2 {"
protected class Description_Rel2Keyword_4 extends KeywordToken  {
	
	public Description_Rel2Keyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getRel2Keyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// coordinates=Coordinates
protected class Description_CoordinatesAssignment_5 extends AssignmentToken  {
	
	public Description_CoordinatesAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getCoordinatesAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("coordinates",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("coordinates");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCoordinatesRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDescriptionAccess().getCoordinatesCoordinatesParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Description_Rel2Keyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Description_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public Description_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getRightCurlyBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_CoordinatesAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("color:" (red=INT green=INT blue=INT alpha=INT) ";")?
protected class Description_Group_7 extends GroupToken {
	
	public Description_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_SemicolonKeyword_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "color:"
protected class Description_ColorKeyword_7_0 extends KeywordToken  {
	
	public Description_ColorKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getColorKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// red=INT green=INT blue=INT alpha=INT
protected class Description_Group_7_1 extends GroupToken {
	
	public Description_Group_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getGroup_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_AlphaAssignment_7_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// red=INT
protected class Description_RedAssignment_7_1_0 extends AssignmentToken  {
	
	public Description_RedAssignment_7_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getRedAssignment_7_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_ColorKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("red",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("red");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDescriptionAccess().getRedINTTerminalRuleCall_7_1_0_0();
			return obj;
		}
		return null;
	}

}

// green=INT
protected class Description_GreenAssignment_7_1_1 extends AssignmentToken  {
	
	public Description_GreenAssignment_7_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getGreenAssignment_7_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_RedAssignment_7_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("green",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("green");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDescriptionAccess().getGreenINTTerminalRuleCall_7_1_1_0();
			return obj;
		}
		return null;
	}

}

// blue=INT
protected class Description_BlueAssignment_7_1_2 extends AssignmentToken  {
	
	public Description_BlueAssignment_7_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getBlueAssignment_7_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_GreenAssignment_7_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("blue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("blue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDescriptionAccess().getBlueINTTerminalRuleCall_7_1_2_0();
			return obj;
		}
		return null;
	}

}

// alpha=INT
protected class Description_AlphaAssignment_7_1_3 extends AssignmentToken  {
	
	public Description_AlphaAssignment_7_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getAlphaAssignment_7_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_BlueAssignment_7_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alpha",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alpha");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDescriptionAccess().getAlphaINTTerminalRuleCall_7_1_3_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Description_SemicolonKeyword_7_2 extends KeywordToken  {
	
	public Description_SemicolonKeyword_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getSemicolonKeyword_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_Group_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Description_RightCurlyBracketKeyword_8 extends KeywordToken  {
	
	public Description_RightCurlyBracketKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDescriptionAccess().getRightCurlyBracketKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Description_Group_7(parent, this, 0, inst);
			case 1: return new Description_RightCurlyBracketKeyword_6(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Description ****************/


/************ begin Rule Coordinates ****************
 *
 * Coordinates:
 *   ("absolute:" (x=INT y=INT width=INT height=INT) ";")? ("relative:" (x=INT y=INT) ";")? (
 *   "offset:" (x=INT y=INT) ";")?;
 *
 **/

// ("absolute:" (x=INT y=INT width=INT height=INT) ";")? ("relative:" (x=INT y=INT) ";")? (
// "offset:" (x=INT y=INT) ";")?
protected class Coordinates_Group extends GroupToken {
	
	public Coordinates_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_Group_2(parent, this, 0, inst);
			case 1: return new Coordinates_Group_1(parent, this, 1, inst);
			case 2: return new Coordinates_Group_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCoordinatesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("absolute:" (x=INT y=INT width=INT height=INT) ";")?
protected class Coordinates_Group_0 extends GroupToken {
	
	public Coordinates_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_SemicolonKeyword_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "absolute:"
protected class Coordinates_AbsoluteKeyword_0_0 extends KeywordToken  {
	
	public Coordinates_AbsoluteKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getAbsoluteKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// x=INT y=INT width=INT height=INT
protected class Coordinates_Group_0_1 extends GroupToken {
	
	public Coordinates_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_HeightAssignment_0_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// x=INT
protected class Coordinates_XAssignment_0_1_0 extends AssignmentToken  {
	
	public Coordinates_XAssignment_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getXAssignment_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_AbsoluteKeyword_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCoordinatesAccess().getXINTTerminalRuleCall_0_1_0_0();
			return obj;
		}
		return null;
	}

}

// y=INT
protected class Coordinates_YAssignment_0_1_1 extends AssignmentToken  {
	
	public Coordinates_YAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getYAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_XAssignment_0_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("y",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("y");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCoordinatesAccess().getYINTTerminalRuleCall_0_1_1_0();
			return obj;
		}
		return null;
	}

}

// width=INT
protected class Coordinates_WidthAssignment_0_1_2 extends AssignmentToken  {
	
	public Coordinates_WidthAssignment_0_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getWidthAssignment_0_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_YAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("width",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("width");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCoordinatesAccess().getWidthINTTerminalRuleCall_0_1_2_0();
			return obj;
		}
		return null;
	}

}

// height=INT
protected class Coordinates_HeightAssignment_0_1_3 extends AssignmentToken  {
	
	public Coordinates_HeightAssignment_0_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getHeightAssignment_0_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_WidthAssignment_0_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("height",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("height");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCoordinatesAccess().getHeightINTTerminalRuleCall_0_1_3_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Coordinates_SemicolonKeyword_0_2 extends KeywordToken  {
	
	public Coordinates_SemicolonKeyword_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getSemicolonKeyword_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_Group_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("relative:" (x=INT y=INT) ";")?
protected class Coordinates_Group_1 extends GroupToken {
	
	public Coordinates_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_SemicolonKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "relative:"
protected class Coordinates_RelativeKeyword_1_0 extends KeywordToken  {
	
	public Coordinates_RelativeKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getRelativeKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// x=INT y=INT
protected class Coordinates_Group_1_1 extends GroupToken {
	
	public Coordinates_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_YAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// x=INT
protected class Coordinates_XAssignment_1_1_0 extends AssignmentToken  {
	
	public Coordinates_XAssignment_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getXAssignment_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_RelativeKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCoordinatesAccess().getXINTTerminalRuleCall_1_1_0_0();
			return obj;
		}
		return null;
	}

}

// y=INT
protected class Coordinates_YAssignment_1_1_1 extends AssignmentToken  {
	
	public Coordinates_YAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getYAssignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_XAssignment_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("y",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("y");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCoordinatesAccess().getYINTTerminalRuleCall_1_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Coordinates_SemicolonKeyword_1_2 extends KeywordToken  {
	
	public Coordinates_SemicolonKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getSemicolonKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_Group_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("offset:" (x=INT y=INT) ";")?
protected class Coordinates_Group_2 extends GroupToken {
	
	public Coordinates_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_SemicolonKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "offset:"
protected class Coordinates_OffsetKeyword_2_0 extends KeywordToken  {
	
	public Coordinates_OffsetKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getOffsetKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_Group_1(parent, this, 0, inst);
			case 1: return new Coordinates_Group_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
}

// x=INT y=INT
protected class Coordinates_Group_2_1 extends GroupToken {
	
	public Coordinates_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_YAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// x=INT
protected class Coordinates_XAssignment_2_1_0 extends AssignmentToken  {
	
	public Coordinates_XAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getXAssignment_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_OffsetKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCoordinatesAccess().getXINTTerminalRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// y=INT
protected class Coordinates_YAssignment_2_1_1 extends AssignmentToken  {
	
	public Coordinates_YAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getYAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_XAssignment_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("y",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("y");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCoordinatesAccess().getYINTTerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Coordinates_SemicolonKeyword_2_2 extends KeywordToken  {
	
	public Coordinates_SemicolonKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCoordinatesAccess().getSemicolonKeyword_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Coordinates_Group_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Coordinates ****************/


/************ begin Rule Programs ****************
 *
 * Programs:
 *   "programs {" program+=Program* "}";
 *
 **/

// "programs {" program+=Program* "}"
protected class Programs_Group extends GroupToken {
	
	public Programs_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProgramsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Programs_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProgramsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "programs {"
protected class Programs_ProgramsKeyword_0 extends KeywordToken  {
	
	public Programs_ProgramsKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramsAccess().getProgramsKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// program+=Program*
protected class Programs_ProgramAssignment_1 extends AssignmentToken  {
	
	public Programs_ProgramAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramsAccess().getProgramAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("program",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("program");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProgramRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProgramsAccess().getProgramProgramParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Programs_ProgramAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Programs_ProgramsKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Programs_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Programs_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramsAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Programs_ProgramAssignment_1(parent, this, 0, inst);
			case 1: return new Programs_ProgramsKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Programs ****************/


/************ begin Rule Program ****************
 *
 * Program:
 *   "program {" ("name:" name=STRING ";") ("signal:" signal=STRING ";") ("source:" source=
 *   STRING ";") ("action:" action=Action)? lua_script=LUA_Script? "}";
 *
 **/

// "program {" ("name:" name=STRING ";") ("signal:" signal=STRING ";") ("source:" source=
// STRING ";") ("action:" action=Action)? lua_script=LUA_Script? "}"
protected class Program_Group extends GroupToken {
	
	public Program_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProgramAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProgramRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "program {"
protected class Program_ProgramKeyword_0 extends KeywordToken  {
	
	public Program_ProgramKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramAccess().getProgramKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "name:" name=STRING ";"
protected class Program_Group_1 extends GroupToken {
	
	public Program_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProgramAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_SemicolonKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "name:"
protected class Program_NameKeyword_1_0 extends KeywordToken  {
	
	public Program_NameKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramAccess().getNameKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_ProgramKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=STRING
protected class Program_NameAssignment_1_1 extends AssignmentToken  {
	
	public Program_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_NameKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProgramAccess().getNameSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Program_SemicolonKeyword_1_2 extends KeywordToken  {
	
	public Program_SemicolonKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramAccess().getSemicolonKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "signal:" signal=STRING ";"
protected class Program_Group_2 extends GroupToken {
	
	public Program_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProgramAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_SemicolonKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "signal:"
protected class Program_SignalKeyword_2_0 extends KeywordToken  {
	
	public Program_SignalKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramAccess().getSignalKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// signal=STRING
protected class Program_SignalAssignment_2_1 extends AssignmentToken  {
	
	public Program_SignalAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getSignalAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_SignalKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProgramAccess().getSignalSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Program_SemicolonKeyword_2_2 extends KeywordToken  {
	
	public Program_SemicolonKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramAccess().getSemicolonKeyword_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_SignalAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "source:" source=STRING ";"
protected class Program_Group_3 extends GroupToken {
	
	public Program_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProgramAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_SemicolonKeyword_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "source:"
protected class Program_SourceKeyword_3_0 extends KeywordToken  {
	
	public Program_SourceKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramAccess().getSourceKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_Group_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// source=STRING
protected class Program_SourceAssignment_3_1 extends AssignmentToken  {
	
	public Program_SourceAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getSourceAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_SourceKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProgramAccess().getSourceSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Program_SemicolonKeyword_3_2 extends KeywordToken  {
	
	public Program_SemicolonKeyword_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramAccess().getSemicolonKeyword_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_SourceAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("action:" action=Action)?
protected class Program_Group_4 extends GroupToken {
	
	public Program_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProgramAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_ActionAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "action:"
protected class Program_ActionKeyword_4_0 extends KeywordToken  {
	
	public Program_ActionKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramAccess().getActionKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_Group_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// action=Action
protected class Program_ActionAssignment_4_1 extends AssignmentToken  {
	
	public Program_ActionAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getActionAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("action",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("action");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProgramAccess().getActionActionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Program_ActionKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// lua_script=LUA_Script?
protected class Program_Lua_scriptAssignment_5 extends AssignmentToken  {
	
	public Program_Lua_scriptAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getLua_scriptAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LUA_Script_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("lua_script",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("lua_script");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLUA_ScriptRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProgramAccess().getLua_scriptLUA_ScriptParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Program_Group_4(parent, next, actIndex, consumed);
			case 1: return new Program_Group_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Program_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public Program_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_Lua_scriptAssignment_5(parent, this, 0, inst);
			case 1: return new Program_Group_4(parent, this, 1, inst);
			case 2: return new Program_Group_3(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Program ****************/


/************ begin Rule Action ****************
 *
 * Action:
 *   name=ID params+=STRING* ";";
 *
 **/

// name=ID params+=STRING* ";"
protected class Action_Group extends GroupToken {
	
	public Action_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class Action_NameAssignment_0 extends AssignmentToken  {
	
	public Action_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// params+=STRING*
protected class Action_ParamsAssignment_1 extends AssignmentToken  {
	
	public Action_ParamsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getParamsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ParamsAssignment_1(parent, this, 0, inst);
			case 1: return new Action_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getParamsSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Action_SemicolonKeyword_2 extends KeywordToken  {
	
	public Action_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ParamsAssignment_1(parent, this, 0, inst);
			case 1: return new Action_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Action ****************/

}
